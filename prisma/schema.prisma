// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario (como en Sequelize)
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  orders    Order[]
  cart      Cart?

  @@map("users")
}

// Modelo de Producto (como en Sequelize)
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  category    String   @default("general")
  imageUrl    String?  @map("image_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

// Modelo de Orden (como en Sequelize)
model Order {
  id          Int           @id @default(autoincrement())
  userId      Int           @map("user_id")
  status      OrderStatus   @default(PENDING)
  total       Decimal       @db.Decimal(10, 2)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relaciones
  user       User          @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

// Modelo de Item de Orden (como en Sequelize)
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")

  // Relaciones
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Modelo de Carrito (como en Sequelize)
model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  // Relaciones
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@map("carts")
}

// Modelo de Item de Carrito (como en Sequelize)
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int      @map("cart_id")
  productId Int      @map("product_id")
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")

  // Relaciones
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

// Enums (como en Sequelize)
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
